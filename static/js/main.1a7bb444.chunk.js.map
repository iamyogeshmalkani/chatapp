{"version":3,"sources":["components/signin/signin.js","components/signout/signout.js","components/chatroom/chatroom.js","App.js","reportWebVitals.js","index.js"],"names":["SignIn","props","className","onClick","provider","firebase","auth","GoogleAuthProvider","Auth","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","firestore","useState","formValue","setFormValue","ChatMessage","message","user","body","photoURL","uid","createdAt","src","alt","sendMessage","e","a","preventDefault","displayName","messagesRef","add","FieldValue","serverTimestamp","dummy","current","scrollIntoView","behavior","useRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","href","map","msg","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useAuthState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a7bb444.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport \"./signin.css\"\nfunction SignIn(props) {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    props.Auth.signInWithPopup(provider);\n  }\n  return (\n    <div className=\"signin\">\n    <h1 className=\"heading\">Patel Nagar Chat</h1>\n    <p className=\"body\">The Easiest way to chat with people around Patel Nagar </p>\n      <button className=\"google\" onClick={signInWithGoogle}>Sign In With Google</button>\n    </div>\n  )\n}\nexport default SignIn ;\n","import \"./signout.css\"\nfunction SignOut(props) {\n  return props.Auth.currentUser && (\n    <div className=\"signoutd\" >\n      <button  className=\"signout\" onClick={() => props.Auth.signOut()}>Sign Out</button>\n    </div>\n  )\n}\nexport default SignOut;\n","import React, { useEffect, useRef, useState } from 'react';\nimport firebase from 'firebase/app';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport \"./chatroom.css\"\nfunction ChatRoom(props) {\n  const firestore = firebase.firestore();\n\nconst [formValue,setFormValue]=useState(\"\");\n  function ChatMessage(props) {\n  const { user, body, uid, photoURL, createdAt } = props.message;\n\n    return (\n\n        <div className=\"user\">\n            <img className=\"profilepic\" src={photoURL} alt=\"{user}'s pfp\" />\n\n        <div>\n            <p className=\"username\">{user} :</p>\n\n\n            <p className=\"message\">{body}</p>\n        </div>\n      </div>\n\n  )\n}\n\n  const sendMessage = async (e) => {\n      e.preventDefault();\n      // gets name, userID and pfp of logged in user\n      const { displayName, uid, photoURL } = props.Auth.currentUser;\n\n      await messagesRef.add({\n        user: displayName,\n        body: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid: uid,\n        photoURL: photoURL\n      })\n\n      // resetting form value and scrolling to bottom\n      setFormValue('');\n      dummy.current.scrollIntoView({ behavior: 'smooth' });\n    }\n\nconst dummy = useRef();\n  const scrollToBottom = () => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  // getting the message and sorting them by time of creation\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt', 'asc').limitToLast(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  return (\n    <div className=\"main\">\n      <div>\n      <a href=\"https://www.instagram.com/memes_of_patel_nagar/?hl=en\" className=\"patel\" >Patel Nagar Chat</a>\n        {/* we will loop over the message and return a\n        ChatMessage component for each message */}\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </div>\n\n      {/* Form to type and submit messages */}\n      <form className=\"form\" onSubmit={sendMessage}>\n        <input className=\"type\" value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Say something\" />\n        <button className=\"send\"  type=\"submit\" disabled={!formValue}>send</button>\n      </form>\n    </div>\n  )\n}\nexport default ChatRoom;\n","import React, { useEffect, useRef, useState } from 'react';\nimport \"./App.css\"\nimport SignIn from \"./components/signin/signin.js\";\nimport SignOut from \"./components/signout/signout.js\";\nimport ChatRoom from \"./components/chatroom/chatroom.js\"\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAstyxpEBS0kDNUvIWrYwK5WckhtLSPbB4\",\n    authDomain: \"yo-yo-messenger.firebaseapp.com\",\n    projectId: \"yo-yo-messenger\",\n    storageBucket: \"yo-yo-messenger.appspot.com\",\n    messagingSenderId: \"910581999610\",\n    appId: \"1:910581999610:web:6b302fff37f397384f2643\",\n    measurementId: \"G-B79S25RXHL\"\n  };\n  firebase.initializeApp(firebaseConfig);\n\n  const auth = firebase.auth();\n\nfunction App() {\n  // checks if user is authenticated i.e. logged in\n  const [user] = useAuthState(auth);\n\n  return (\n    <div>\n      <SignOut\n      Auth={auth}/>\n      <section>\n        {/* Shows chatroom if user is logged in\n        else show signin page */}\n        {user ? <ChatRoom\n          Auth={auth}\n           /> : <SignIn\n          Auth={auth} />}\n      </section>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}